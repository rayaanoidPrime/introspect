(()=>{var e={385:e=>{var t,r,n,o=e.exports={};function s(){throw Error("setTimeout has not been defined")}function i(){throw Error("clearTimeout has not been defined")}function a(e){if(t===setTimeout)return setTimeout(e,0);if((t===s||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:s}catch(e){t=s}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var c=[],l=!1,u=-1;function p(){l&&n&&(l=!1,n.length?c=n.concat(c):u=-1,c.length&&f())}function f(){if(!l){var e=a(p);l=!0;for(var t=c.length;t;){for(n=c,c=[];++u<t;)n&&n[u].run();u=-1,t=c.length}n=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new d(e,t)),1!==c.length||l||a(f)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw Error("process.chdir is not supported")},o.umask=function(){return 0}}},t={};(()=>{"use strict";var r=function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}},i=!0;try{e[n](s,s.exports,r),i=!1}finally{i&&delete t[n]}return s.exports}(385);let n=(e,t)=>{if("http"!==e&&"ws"!==e)throw Error("Protocol not supported");return""!==t?"ws"===e?"".concat((r.env.NEXT_PUBLIC_AGENTS_ENDPOINT||"").replace("http","ws"),"/").concat(t):"".concat(r.env.NEXT_PUBLIC_AGENTS_ENDPOINT||"","/").concat(t):"".concat(r.env.NEXT_PUBLIC_AGENTS_ENDPOINT||"")},o=async(e,t)=>{let r=n("http","upload_files"),o=new FormData;for(let r of(o.append("token",e),t))o.append("files",r);return new Promise((e,t)=>{let n=new XMLHttpRequest;n.addEventListener("load",async()=>{if(console.time("utils:uploadMultipleFilesAsDb:processResponse"),n.status>=200&&n.status<300)try{let t=JSON.parse(n.responseText);console.timeEnd("utils:uploadMultipleFilesAsDb:processResponse"),e({dbName:t.db_name,dbInfo:t.db_info})}catch(e){t(Error("Failed to parse response"))}else try{let e=JSON.parse(n.responseText),r="object"==typeof e.detail?JSON.stringify(e.detail):e.detail||e.message||"Unknown error occurred";t(Error(r))}catch(e){t(Error(n.responseText||"Failed to create new db name - are you sure your network is working?"))}}),n.addEventListener("error",()=>{t(Error("Network error occurred"))}),n.addEventListener("abort",()=>{t(Error("Upload aborted"))}),n.open("POST",r),n.send(o)})};self.onmessage=async e=>{let{type:t,token:r,files:n}=e.data;if(console.log("Worker event",e.data),"UPLOAD_FILE"===t)try{let{dbName:e,dbInfo:t}=await o(r,n);self.postMessage({type:"UPLOAD_SUCCESS",dbName:e,dbInfo:t})}catch(t){console.log("Error",t);let e={type:"UPLOAD_ERROR",error:t instanceof Error?t.message.replace(/^Error: /,""):String(t)};self.postMessage(e)}}})(),_N_E={}})();